import sys

from PyQt5.QtCore import Qt
from PyQt5.QtGui import QStandardItem
from PyQt5.QtGui import QStandardItemModel
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QMenu
from PyQt5.QtWidgets import QTreeView
from PyQt5.QtWidgets import QVBoxLayout
from PyQt5.QtWidgets import QWidget

data = [
    ("Alice", [
        ("Keys", []),
        ("Purse", [
            ("Cellphone", [])
        ])
    ]),
    ("Bob", [
        ("Wallet", [
            ("Credit card", []),
            ("Money", [])
        ])
    ])
]

class Window(QWidget):
    def __init__(self):

        QWidget.__init__(self)

        self.treeView = QTreeView()
        self.treeView.setContextMenuPolicy(Qt.CustomContextMenu)
        self.treeView.customContextMenuRequested.connect(self.openMenu)

        self.model = QStandardItemModel()
        self.addItems(self.model, data)
        self.treeView.setModel(self.model)

        self.model.setHorizontalHeaderLabels([self.tr("Object")])

        layout = QVBoxLayout()
        layout.addWidget(self.treeView)
        self.setLayout(layout)

    def addItems(self, parent, elements):

        for text, children in elements:
            item = QStandardItem(text)
            parent.appendRow(item)
            if children:
                self.addItems(item, children)

        title = os.path.basename(path)
        item = QStandardItem()
        if os.path.isdir(path):
            icon_path = DIR_ICON_PATH
        else:
            if path.endswith('PNG') or path.endswith('png') or path.endswith('JPG') or path.endswith(
                    'jpg') or path.endswith('JPEG') or path.endswith('jpeg') or path.endswith(
                'GIF') or path.endswith('gif'):
                icon_path = IMAGE_ICON_PATH
            elif path.endswith('.mp4'):
                icon_path = VIDEO_ICON_PATH
            else:
                icon_path = FILE_ICON_PATH
        icon = QIcon(icon_path)
        item.setText(title)
        item.setIcon(icon)
        return item

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())