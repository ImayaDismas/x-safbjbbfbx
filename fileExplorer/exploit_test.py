# -*- coding: utf-8 -*-
import os

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QDir
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtGui import QStandardItem
from PyQt5.QtGui import QStandardItemModel
from PyQt5.QtWidgets import QDialog
from PyQt5.QtWidgets import QFileSystemModel
from PyQt5.QtWidgets import QTreeView
from PyQt5.QtWidgets import QVBoxLayout

DEFAULT_DIR_PATH = '/home/.exploits'
DIR_ICON_PATH = 'Resources/dir.png'
FILE_ICON_PATH = 'Resources/file.png'
IMAGE_ICON_PATH = 'Resources/image.png'
VIDEO_ICON_PATH = 'Resources/video.png'


class Ui_MainWindow(object):
    def setupUi(self, MainWindow, model):
        # self.initDirectory(DEFAULT_DIR_PATH)
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowTitle("Exploit")

        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralWidget")

        self.hLayout = QtWidgets.QHBoxLayout(self.centralWidget)
        self.hLayout.setContentsMargins(11, 11, 11, 11)
        # self.hLayout.setSpacing(6)
        self.hLayout.setObjectName("hLayout")

        self.comboBox_Devices = QtWidgets.QComboBox()
        self.comboBox_Devices.setStyleSheet("max-width:250;\n""selection-color: rgb(11, 181, 255);\n"
                                            "selection-background-color: rgb(255, 255, 255);")
        self.comboBox_Devices.setObjectName("comboBox_Devices")
        devices = next(os.walk(DEFAULT_DIR_PATH))[1]

        self.comboBox_Devices.addItem("Devices")
        for device in devices:
            self.comboBox_Devices.addItem(device)

        self.comboBox_Devices.activated[str].connect(self.setTreeviewItem)
        self.listLabel = QtWidgets.QLabel("DEVICES")
        self.dialog = QDialog()
        self.layout = QVBoxLayout(self.dialog)

        self.treeView = QTreeView(self.dialog)
        # QTreeView use QStandardItemModel as data source
        self.treeView.setModel(model)
        model.setRootPath(DEFAULT_DIR_PATH)
        self.treeView.setRootIndex(model.index(DEFAULT_DIR_PATH))
        self.treeView.setHeaderHidden(True)
        self.treeView.hideColumn(1)
        self.treeView.hideColumn(2)
        self.treeView.hideColumn(3)
        self.layout.addWidget(self.treeView)

        self.listLabel1 = QtWidgets.QLabel("DATA")
        self.listLabel1.setStyleSheet("font: 14pt \"Sans Serif\";")
        self.listLabel1.setAlignment(QtCore.Qt.AlignCenter)

        self.details_dialog = QDialog()
        self.layout_details = QVBoxLayout(self.details_dialog)

        self.treeView_Details = QTreeView(self.details_dialog)
        # QTreeView use QStandardItemModel as data source

        # self.details_model = QFileSystemModel()
        # self.details_model.setRootPath(DEFAULT_DIR_PATH)
        # self.treeView_Details.setModel( self.details_model)
        # self.treeView_Details.setRootIndex(self.details_model.index(DEFAULT_DIR_PATH))
        self.layout_details.addWidget(self.treeView_Details)
        # self.tableView = QTableView()
        # self.tableView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        # self.tableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        # self.tableView.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
        # self.tableView.verticalHeader().setDefaultSectionSize(80)
        # self.tableView.horizontalHeader().setDefaultAlignment(Qt.AlignLeft)

        splitter_label = QtWidgets.QSplitter(Qt.Horizontal)
        splitter_label.addWidget(self.comboBox_Devices)
        splitter_label.addWidget(self.listLabel1)
        splitter_label.setSizes([30, 157])

        splitter_data = QtWidgets.QSplitter(Qt.Horizontal)
        splitter_data.addWidget(self.treeView)
        splitter_data.addWidget(self.treeView_Details)
        splitter_data.setSizes([30, 157])

        splitter_all = QtWidgets.QSplitter(Qt.Vertical)
        splitter_all.addWidget(splitter_label)
        splitter_all.addWidget(splitter_data)
        splitter_all.setSizes([1, 500])

        self.hLayout.addWidget(splitter_all)

        MainWindow.setCentralWidget(self.centralWidget)

    def initDirectory(self, path):
        new_item = self.newItem(path)
        self.readDirectory(path, new_item)
        model.appendRow(new_item)

    def readDirectory(self, path, parent_item):
        directory = os.listdir(path)
        for file_name in directory:
            self.file_path = path + '/' + file_name
            new_item = self.newItem(self.file_path)
            parent_item.appendRow(new_item)
            if os.path.isdir(self.file_path):
                self.readDirectory(self.file_path, new_item)

    def newItem(self, path):
        title = os.path.basename(path)
        item = QStandardItem()
        if os.path.isdir(path):
            icon_path = DIR_ICON_PATH
        else:
            if path.endswith('PNG') or path.endswith('png') or path.endswith('JPG') or path.endswith(
                    'jpg') or path.endswith('JPEG') or path.endswith('jpeg') or path.endswith(
                'GIF') or path.endswith('gif'):
                icon_path = IMAGE_ICON_PATH
            elif path.endswith('.mp4'):
                icon_path = VIDEO_ICON_PATH
            else:
                icon_path = FILE_ICON_PATH
        icon = QIcon(icon_path)
        item.setText(title)
        item.setIcon(icon)
        return item

    def setTreeviewItem(self, device):
        print(device)
        self.treeView.se


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    # model = QStandardItemModel()
    model = QFileSystemModel()
    ui.setupUi(MainWindow, model)
    MainWindow.show()
    sys.exit(app.exec_())
